var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw new Error('Dynamic require of "' + x + '" is not supported');
});
var __commonJS = (cb, mod) => function __require2() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// ../../dist/index.js
var require_dist = __commonJS({
  "../../dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var O = () => typeof document > "u" ? new URL("file:/Users/cisdi/work/tools/vite-plugin-api--test/dist/index.js").href : document.currentScript && document.currentScript.src || new URL("main.js", document.baseURI).href;
    var f = O();
    var R = (e = false) => {
      let t = 0;
      return (o) => {
        let n = `vite-plugin-${o}`;
        return e ? `${n}:${t++}` : n;
      };
    };
    var _path = __require("path");
    var _path2 = _interopRequireDefault(_path);
    var _fsextra = __require("fs-extra");
    var _fsextra2 = _interopRequireDefault(_fsextra);
    var _ejs = __require("ejs");
    var _ejs2 = _interopRequireDefault(_ejs);
    var _swaggertypescriptapi = __require("swagger-typescript-api");
    var _lodash = __require("lodash");
    var _crypto = __require("crypto");
    var _crypto2 = _interopRequireDefault(_crypto);
    var C = (e, t = "") => _fsextra2.default.existsSync(e) ? _fsextra2.default.readFileSync(e, "utf8") : t;
    var g = (e, t) => {
      _fsextra2.default.ensureFileSync(e), _fsextra2.default.writeFileSync(e, t, "utf8");
    };
    var P = (e) => {
      let t = _crypto2.default.createHash("sha256");
      return t.update(e), t.digest("hex");
    };
    function E(e, t) {
      return `/**
 * 
 *  THIS FILE WAS GENERATED SWAGGER-TYPESCRIPT-API
 *
 *  VERSION_HASH: ${e}
 * 
 *  LAST_MODIFIED: ${t}                                                                        
 */
  
`;
    }
    var F = `/**
 * 
 *  THIS FILE WAS GENERATED BY AXIOS.EJS
 *                                                               
 */
`;
    var y = { keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", encode: function(e) {
      let t = "", o, n, i, l, s, a, p, m = 0;
      for (e = y._utf8_encode(e); m < e.length; )
        o = e.charCodeAt(m++), n = e.charCodeAt(m++), i = e.charCodeAt(m++), l = o >> 2, s = (o & 3) << 4 | n >> 4, a = (n & 15) << 2 | i >> 6, p = i & 63, isNaN(n) ? a = p = 64 : isNaN(i) && (p = 64), t = t + this.keyStr.charAt(l) + this.keyStr.charAt(s) + this.keyStr.charAt(a) + this.keyStr.charAt(p);
      return t;
    }, _utf8_encode: function(e) {
      e = e.replace(/rn/g, "n");
      let t = "";
      for (let o = 0; o < e.length; o++) {
        let n = e.charCodeAt(o);
        n < 128 ? t += String.fromCharCode(n) : n > 127 && n < 2048 ? (t += String.fromCharCode(n >> 6 | 192), t += String.fromCharCode(n & 63 | 128)) : (t += String.fromCharCode(n >> 12 | 224), t += String.fromCharCode(n >> 6 & 63 | 128), t += String.fromCharCode(n & 63 | 128));
      }
      return t;
    } };
    var _ = new URL(f).pathname;
    var x = _path2.default.dirname(_);
    var B = { authorizationToken: `Basic ${y.encode("admin:admin")}`, templates: _path2.default.resolve(x, "templates"), silent: true, cleanOutput: true, modular: true, httpClientType: "axios", defaultResponseAsSuccess: false, generateClient: true, generateResponses: true, typeSuffix: "Type", prettier: { printWidth: 120, tabWidth: 2, trailingComma: "all", parser: "typescript" }, singleHttpClient: true, generateUnionEnums: true, fixInvalidTypeNamePrefix: "Type", fixInvalidEnumKeyPrefix: "Value", codeGenConstructs: (e) => ({ ...e, TypeField: ({ readonly: t, key: o, optional: n, value: i }) => {
      let l = i;
      if (i.includes("Enum")) {
        let s = /(?:\w+Enum\.)?(\w+)/;
        l = i.split("|").map((p) => p.match(s) ? `"${p.match(s)[1]}"` : null).join(" | ");
      }
      return _lodash.compact.call(void 0, [t && "readonly ", o, n && "?", ": ", l]).join("");
    } }), hooks: { onFormatRouteName: (e, t) => {
      let { pathArgs: o, route: n, method: i } = e, l = n.split("/"), s = l.at(-2);
      return o.length ? `${s.includes(i) ? _lodash.camelCase.call(void 0, s) + "By" + _lodash.upperFirst.call(void 0, o[0].name) : i + _lodash.upperFirst.call(void 0, _lodash.camelCase.call(void 0, s)) + "By" + _lodash.upperFirst.call(void 0, o[0].name)}` : _lodash.camelCase.call(void 0, l.pop());
    }, onPrepareConfig: (e) => {
      let { config: t } = e;
      return t.fileNames.httpClient = "HttpClient", t.fileNames.dataContracts = "Types", { ...e, config: t };
    }, onCreateComponent: (e) => {
    }, onCreateRoute: (e) => {
    } } };
    var D = (e) => {
      let { username: t, password: o, blobResponseTypeNames: n, formatModuleNames: i, ignoreModuleNames: l, fixTypes: s, requiredTypes: a, ...p } = e, m = { ...B, ...p };
      if (!e.url || !e.url.length)
        throw new Error("url \u4E0D\u80FD\u4E3A\u7A7A");
      if (t && o) {
        let r = y.encode(`${t}:${o}`);
        m.authorizationToken = `Basic ${r}`;
      }
      return (n || l || i) && (m.hooks.onCreateRoute = (r) => {
        let { raw: c } = r;
        return n && n.includes(c.summary) && (r.responseBodySchema.contentKind = "BLOB"), l && l.includes(c.moduleName) && (r.namespace = ""), i && i[c.moduleName] && (r.namespace = i[c.moduleName]), r;
      }), (s || a) && (m.hooks.onCreateComponent = (r) => {
        if (s[r.typeName] && Object.entries(s[r.typeName]).forEach(([c, S]) => {
          r.rawTypeData.properties[c] = S;
        }), a[r.typeName]) {
          let c = r.rawTypeData.required ? r.rawTypeData.required : [];
          r.rawTypeData.required = [...c, ...a[r.typeName]];
        }
        return r;
      }), m;
    };
    async function w(e) {
      try {
        console.log("\u2714\uFE0F Starting API client generation...");
        let t = _path2.default.resolve(x, "templates/axios.ejs"), o = _path2.default.resolve(x, "templates/option.ejs"), n = _path2.default.resolve(x, "records/version.json"), i = _path2.default.resolve("src/api/module"), l = _path2.default.resolve("src/api/index.ts"), s = _path2.default.resolve("src/api/option.ts"), a = C(n) ? JSON.parse(C(n)) : {}, p = await _swaggertypescriptapi.generateApi.call(void 0, D(e));
        _fsextra2.default.ensureDirSync(i);
        let m = "";
        for (let { fileName: r, fileContent: c, fileExtension: S } of p.files) {
          a[r] || (a[r] = { hash: "", time: "" });
          let v = a[r].hash || "", A = P(c);
          if (A !== v) {
            console.log(`\u2714\uFE0F The ${r} file has changed. Updating...`);
            let I = new Date().toLocaleString();
            a[r].hash = A, a[r].time = I, m = E(A, I);
            let $ = `${m}${c}`;
            g(_path2.default.resolve(i, `${r}${S}`), $);
          } else
            console.log(`\u2714\uFE0F No changes detected in ${r} file.`);
        }
        if (g(n, JSON.stringify(a, null, 4)), _fsextra2.default.existsSync(t)) {
          console.log("\u2714\uFE0F Rendering Axios template...");
          let r = _fsextra2.default.readFileSync(t, "utf8"), c = _ejs2.default.render(r, { data: p.files });
          g(l, `${F}${c}`), console.log(`\u2714\uFE0F Axios template rendered and saved to ${l}`);
        } else
          console.warn("\u2716\uFE0F Axios template not found. Skipping rendering.");
        if (!_fsextra2.default.existsSync(s) && _fsextra2.default.existsSync(o)) {
          let r = _fsextra2.default.readFileSync(o, "utf8");
          g(s, r);
        }
        console.log("\u2714\uFE0F API client generation completed.");
      } catch (t) {
        console.error("\u2716\uFE0F Error during API generation:", t.message);
      }
    }
    var M = R(false);
    var j = exports.autGenerateApi = (e) => ({ name: M("auto-generate-api"), enforce: "pre", apply: "serve", buildStart() {
      w(e).catch((t) => {
        console.error(t);
      });
    } });
    var re = exports.default = j;
    exports.autGenerateApi = j;
    exports.default = re;
  }
});

// vite.config.ts
var import_dist = __toESM(require_dist(), 1);
import { defineConfig } from "vite";
import Vue from "@vitejs/plugin-vue";
import Inspect from "vite-plugin-inspect";
var vite_config_default = defineConfig({
  plugins: [Vue(), Inspect(), (0, import_dist.default)({
    url: "http://10.180.34.1:19990/v3/api-docs/api",
    username: "admin",
    password: "admin"
  })]
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
