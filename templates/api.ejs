<%
const { utils, route, config, modelTypes } = it;

const { _, pascalCase, require } = utils;
const apiClassName = pascalCase(route.moduleName);
const routes = route.routes;
const dataContracts = _.map(modelTypes, "name");
%>

<% if (config.httpClientType === config.constants.HTTP_CLIENT.AXIOS) { %> import type { AxiosRequestConfig, AxiosResponse } from "axios"; <% } %>

import { options } from "../option"
import { HttpClient, RequestParams, ContentType, HttpResponse } from "./<%~ config.fileNames.httpClient %>";
<% if (dataContracts.length) { %>
import { <%~ dataContracts.join(", ") %> } from "./<%~ config.fileNames.dataContracts %>"
<% } %>



export class <%= apiClassName %><SecurityDataType=unknown><% if (!config.singleHttpClient) { %> extends HttpClient<SecurityDataType> <% } %> {
    <% if(config.singleHttpClient) { %>
      private http: HttpClient<SecurityDataType>;
      private option = options['<%~ apiClassName %>'] || {}

      constructor (http: HttpClient<SecurityDataType>) {
        this.http = http;
        }
        <% } %>

        cancel = (key: string) => {
          this.http.cancelControllers.get(key)?.abort();
          this.http.cancelControllers.delete(key);
        }


        <% for (const route of routes) { %>
        <%~ includeFile('./procedure-call.ejs', { ...it, route, apiClassName }) %>
        <% } %>
        }