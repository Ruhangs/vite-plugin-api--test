import fs from 'fs-extra';
import crypto from 'crypto';

// 工具函数：读取文件内容
export const readFileIfExists = (filePath: string, defaultValue = '') => (fs.existsSync(filePath) ? fs.readFileSync(filePath, 'utf8') : defaultValue);

// 工具函数：保存文件内容
export const saveFile = (filePath: string, content: string) => {
    fs.ensureFileSync(filePath);
    fs.writeFileSync(filePath, content, 'utf8');
};

// 工具函数：生成文件哈希
export const generateFileHash = (content: string) => {
    const hash = crypto.createHash('sha256');
    hash.update(content);
    return hash.digest('hex');
};

export function generateFilePrefix(hash: string, time: string) {
    return `/**
 * 
 *  THIS FILE WAS GENERATED SWAGGER-TYPESCRIPT-API
 *
 *  VERSION_HASH: ${hash}
 * 
 *  LAST_MODIFIED: ${time}                                                                        
 */
  
`;
}

export const axiosFilePrefix: string = `/**
 * 
 *  THIS FILE WAS GENERATED BY AXIOS.EJS
 *                                                               
 */
`;

export const Base64 = {
    keyStr: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',

    encode: function (e: any) {
        let t = '';
        let n, r, i, s, o, u, a;
        let f = 0;
        e = Base64._utf8_encode(e);
        while (f < e.length) {
            n = e.charCodeAt(f++);
            r = e.charCodeAt(f++);
            i = e.charCodeAt(f++);
            s = n >> 2;
            o = ((n & 3) << 4) | (r >> 4);
            u = ((r & 15) << 2) | (i >> 6);
            a = i & 63;
            if (isNaN(r)) {
                u = a = 64;
            } else if (isNaN(i)) {
                a = 64;
            }
            t = t + this.keyStr.charAt(s) + this.keyStr.charAt(o) + this.keyStr.charAt(u) + this.keyStr.charAt(a);
        }
        return t;
    },
    _utf8_encode: function (e: any) {
        e = e.replace(/rn/g, 'n');
        let t = '';
        for (let n = 0; n < e.length; n++) {
            let r = e.charCodeAt(n);
            if (r < 128) {
                t += String.fromCharCode(r);
            } else if (r > 127 && r < 2048) {
                t += String.fromCharCode((r >> 6) | 192);
                t += String.fromCharCode((r & 63) | 128);
            } else {
                t += String.fromCharCode((r >> 12) | 224);
                t += String.fromCharCode(((r >> 6) & 63) | 128);
                t += String.fromCharCode((r & 63) | 128);
            }
        }
        return t;
    }
};
